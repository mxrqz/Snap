"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/snap/route";
exports.ids = ["app/api/snap/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/***/ ((module) => {

module.exports = require("sharp");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsnap%2Froute&page=%2Fapi%2Fsnap%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsnap%2Froute.ts&appDir=%2FUsers%2Fmxrqz%2Fprojects%2Fmomentum%2Fsnap%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmxrqz%2Fprojects%2Fmomentum%2Fsnap&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsnap%2Froute&page=%2Fapi%2Fsnap%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsnap%2Froute.ts&appDir=%2FUsers%2Fmxrqz%2Fprojects%2Fmomentum%2Fsnap%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmxrqz%2Fprojects%2Fmomentum%2Fsnap&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_mxrqz_projects_momentum_snap_src_app_api_snap_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/snap/route.ts */ \"(rsc)/./src/app/api/snap/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/snap/route\",\n        pathname: \"/api/snap\",\n        filename: \"route\",\n        bundlePath: \"app/api/snap/route\"\n    },\n    resolvedPagePath: \"/Users/mxrqz/projects/momentum/snap/src/app/api/snap/route.ts\",\n    nextConfigOutput,\n    userland: _Users_mxrqz_projects_momentum_snap_src_app_api_snap_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/snap/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzbmFwJTJGcm91dGUmcGFnZT0lMkZhcGklMkZzbmFwJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGc25hcCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm14cnF6JTJGcHJvamVjdHMlMkZtb21lbnR1bSUyRnNuYXAlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGbXhycXolMkZwcm9qZWN0cyUyRm1vbWVudHVtJTJGc25hcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDYTtBQUMxRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3NuYXAvPzI5ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL214cnF6L3Byb2plY3RzL21vbWVudHVtL3NuYXAvc3JjL2FwcC9hcGkvc25hcC9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvc25hcC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3NuYXBcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3NuYXAvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvbXhycXovcHJvamVjdHMvbW9tZW50dW0vc25hcC9zcmMvYXBwL2FwaS9zbmFwL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9zbmFwL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsnap%2Froute&page=%2Fapi%2Fsnap%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsnap%2Froute.ts&appDir=%2FUsers%2Fmxrqz%2Fprojects%2Fmomentum%2Fsnap%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmxrqz%2Fprojects%2Fmomentum%2Fsnap&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/snap/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/snap/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_microlink__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/microlink */ \"(rsc)/./src/lib/services/microlink.ts\");\n/* harmony import */ var _lib_services_image_processor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/services/image-processor */ \"(rsc)/./src/lib/services/image-processor.ts\");\n/* harmony import */ var _lib_services_browser_mockup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/services/browser-mockup */ \"(rsc)/./src/lib/services/browser-mockup.ts\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/validation */ \"(rsc)/./src/lib/validation.ts\");\n\n\n\n\n\nfunction createErrorResponse(error, status = 400) {\n    const response = {\n        success: false,\n        error\n    };\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n        status\n    });\n}\nfunction createSuccessResponse(imageBuffer, url, metadata) {\n    const response = {\n        success: true,\n        imageUrl: `data:image/png;base64,${imageBuffer.toString(\"base64\")}`,\n        metadata: {\n            originalUrl: url,\n            processedAt: new Date().toISOString(),\n            dimensions: metadata\n        }\n    };\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n}\nasync function processSnapshot(url, screenshotConfig, styleConfig) {\n    // Merge with defaults\n    const finalScreenshotConfig = {\n        ..._lib_services_microlink__WEBPACK_IMPORTED_MODULE_1__.MicrolinkService.getDefaultConfig(),\n        url,\n        ...screenshotConfig\n    };\n    const finalStyleConfig = {\n        ..._lib_services_image_processor__WEBPACK_IMPORTED_MODULE_2__.ImageProcessor.getDefaultStyle(),\n        ...styleConfig\n    };\n    // Optimize viewport for final image size if specified\n    // TODO: Temporarily disabled - using original config\n    // const optimizedScreenshotConfig = MicrolinkService.optimizeViewportForFinalSize(\n    //   finalScreenshotConfig,\n    //   finalStyleConfig.finalSize\n    // )\n    const optimizedScreenshotConfig = finalScreenshotConfig;\n    // Fetch screenshot from Microlink\n    const screenshotBuffer = await _lib_services_microlink__WEBPACK_IMPORTED_MODULE_1__.MicrolinkService.fetchScreenshot(optimizedScreenshotConfig);\n    // Apply browser mockup if specified\n    let processedBuffer = screenshotBuffer;\n    if (finalStyleConfig.browserMockup !== \"none\") {\n        processedBuffer = await _lib_services_browser_mockup__WEBPACK_IMPORTED_MODULE_3__.BrowserMockupService.applyMockup(processedBuffer, finalStyleConfig.browserMockup);\n    }\n    // Apply styling (borders, margins, gradients, shadows)\n    processedBuffer = await _lib_services_image_processor__WEBPACK_IMPORTED_MODULE_2__.ImageProcessor.processScreenshot(processedBuffer, finalStyleConfig);\n    // Get final dimensions\n    const sharp = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! sharp */ \"sharp\", 23))).default;\n    const metadata = await sharp(processedBuffer).metadata();\n    return {\n        buffer: processedBuffer,\n        metadata: {\n            width: metadata.width || 0,\n            height: metadata.height || 0\n        }\n    };\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const queryParams = Object.fromEntries(searchParams.entries());\n        console.log(\"Query params received:\", queryParams);\n        if (!queryParams.url) {\n            return createErrorResponse(\"Missing required parameter: url\");\n        }\n        // Clean up empty string parameters\n        const cleanedParams = Object.fromEntries(Object.entries(queryParams).filter(([_, value])=>value !== \"\"));\n        const validatedQuery = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_4__.validateSnapQuery)(cleanedParams);\n        const snapRequest = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_4__.queryToRequest)(validatedQuery);\n        const { buffer, metadata } = await processSnapshot(snapRequest.url, snapRequest.screenshot, snapRequest.style);\n        return createSuccessResponse(buffer, snapRequest.url, metadata);\n    } catch (error) {\n        console.error(\"GET /api/snap error:\", error);\n        if (error instanceof Error) {\n            if (error.message.includes(\"ZodError\") || error.name === \"ZodError\") {\n                return createErrorResponse(`Validation error: ${error.message}`, 400);\n            }\n            if (error.message.includes(\"Screenshot fetch failed\")) {\n                return createErrorResponse(`Screenshot error: ${error.message}`, 503);\n            }\n            if (error.message.includes(\"Processing error\") || error.message.includes(\"Sharp\")) {\n                return createErrorResponse(`Image processing error: ${error.message}`, 500);\n            }\n            return createErrorResponse(`Server error: ${error.message}`, 500);\n        }\n        return createErrorResponse(\"Internal server error\", 500);\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const validatedRequest = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_4__.validateSnapRequest)(body);\n        const { buffer, metadata } = await processSnapshot(validatedRequest.url, validatedRequest.screenshot, validatedRequest.style);\n        return createSuccessResponse(buffer, validatedRequest.url, metadata);\n    } catch (error) {\n        console.error(\"POST /api/snap error:\", error);\n        if (error instanceof Error) {\n            if (error.message.includes(\"ZodError\") || error.name === \"ZodError\") {\n                return createErrorResponse(`Validation error: ${error.message}`, 400);\n            }\n            if (error.message.includes(\"Screenshot fetch failed\")) {\n                return createErrorResponse(`Screenshot error: ${error.message}`, 503);\n            }\n            if (error.message.includes(\"Processing error\") || error.message.includes(\"Sharp\")) {\n                return createErrorResponse(`Image processing error: ${error.message}`, 500);\n            }\n            return createErrorResponse(`Server error: ${error.message}`, 500);\n        }\n        return createErrorResponse(\"Internal server error\", 500);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUd4QixPQUFPL0Msc0JBQXNCMkIsUUFBUTJCLGlCQUFpQnBELEdBQUcsRUFBRUM7SUFDN0QsRUFBRSxPQUFPUixPQUFPO1FBQ2QyQyxRQUFRM0MsS0FBSyxDQUFDLHlCQUF5QkE7UUFFdkMsSUFBSUEsaUJBQWlCcUQsT0FBTztZQUMxQixJQUFJckQsTUFBTXNELE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLGVBQWV2RCxNQUFNd0QsSUFBSSxLQUFLLFlBQVk7Z0JBQ25FLE9BQU96RCxvQkFBb0IsQ0FBQyxrQkFBa0IsRUFBRUMsTUFBTXNELE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDbkU7WUFDQSxJQUFJdEQsTUFBTXNELE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLDRCQUE0QjtnQkFDckQsT0FBT3hELG9CQUFvQixDQUFDLGtCQUFrQixFQUFFQyxNQUFNc0QsT0FBTyxDQUFDLENBQUMsRUFBRTtZQUNuRTtZQUNBLElBQUl0RCxNQUFNc0QsT0FBTyxDQUFDQyxRQUFRLENBQUMsdUJBQXVCdkQsTUFBTXNELE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLFVBQVU7Z0JBQ2pGLE9BQU94RCxvQkFBb0IsQ0FBQyx3QkFBd0IsRUFBRUMsTUFBTXNELE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDekU7WUFDQSxPQUFPdkQsb0JBQW9CLENBQUMsY0FBYyxFQUFFQyxNQUFNc0QsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUMvRDtRQUVBLE9BQU92RCxvQkFBb0IseUJBQXlCO0lBQ3REO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbmFwLy4vc3JjL2FwcC9hcGkvc25hcC9yb3V0ZS50cz8wNWZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcbmltcG9ydCB7IE1pY3JvbGlua1NlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9taWNyb2xpbmsnXG5pbXBvcnQgeyBJbWFnZVByb2Nlc3NvciB9IGZyb20gJ0AvbGliL3NlcnZpY2VzL2ltYWdlLXByb2Nlc3NvcidcbmltcG9ydCB7IEJyb3dzZXJNb2NrdXBTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvYnJvd3Nlci1tb2NrdXAnXG5pbXBvcnQgeyB2YWxpZGF0ZVNuYXBSZXF1ZXN0LCB2YWxpZGF0ZVNuYXBRdWVyeSwgcXVlcnlUb1JlcXVlc3QgfSBmcm9tICdAL2xpYi92YWxpZGF0aW9uJ1xuaW1wb3J0IHR5cGUgeyBTbmFwUmVzcG9uc2UsIFNjcmVlbnNob3RDb25maWcsIFN0eWxlQ29uZmlnIH0gZnJvbSAnQC9saWIvdHlwZXMnXG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yUmVzcG9uc2UoZXJyb3I6IHN0cmluZywgc3RhdHVzID0gNDAwKTogTmV4dFJlc3BvbnNlIHtcbiAgY29uc3QgcmVzcG9uc2U6IFNuYXBSZXNwb25zZSA9IHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBlcnJvclxuICB9XG4gIFxuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVzcG9uc2UsIHsgc3RhdHVzIH0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZShpbWFnZUJ1ZmZlcjogQnVmZmVyLCB1cmw6IHN0cmluZywgbWV0YWRhdGE6IGFueSk6IE5leHRSZXNwb25zZSB7XG4gIGNvbnN0IHJlc3BvbnNlOiBTbmFwUmVzcG9uc2UgPSB7XG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBpbWFnZVVybDogYGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwke2ltYWdlQnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKX1gLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICBvcmlnaW5hbFVybDogdXJsLFxuICAgICAgcHJvY2Vzc2VkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGRpbWVuc2lvbnM6IG1ldGFkYXRhXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3BvbnNlKVxufVxuXG5hc3luYyBmdW5jdGlvbiBwcm9jZXNzU25hcHNob3QodXJsOiBzdHJpbmcsIHNjcmVlbnNob3RDb25maWc/OiBQYXJ0aWFsPFNjcmVlbnNob3RDb25maWc+LCBzdHlsZUNvbmZpZz86IFBhcnRpYWw8U3R5bGVDb25maWc+KTogUHJvbWlzZTx7IGJ1ZmZlcjogQnVmZmVyLCBtZXRhZGF0YTogYW55IH0+IHtcbiAgLy8gTWVyZ2Ugd2l0aCBkZWZhdWx0c1xuICBjb25zdCBmaW5hbFNjcmVlbnNob3RDb25maWc6IFNjcmVlbnNob3RDb25maWcgPSB7XG4gICAgLi4uTWljcm9saW5rU2VydmljZS5nZXREZWZhdWx0Q29uZmlnKCksXG4gICAgdXJsLFxuICAgIC4uLnNjcmVlbnNob3RDb25maWdcbiAgfVxuXG4gIGNvbnN0IGZpbmFsU3R5bGVDb25maWc6IFN0eWxlQ29uZmlnID0ge1xuICAgIC4uLkltYWdlUHJvY2Vzc29yLmdldERlZmF1bHRTdHlsZSgpLFxuICAgIC4uLnN0eWxlQ29uZmlnXG4gIH1cblxuICAvLyBPcHRpbWl6ZSB2aWV3cG9ydCBmb3IgZmluYWwgaW1hZ2Ugc2l6ZSBpZiBzcGVjaWZpZWRcbiAgLy8gVE9ETzogVGVtcG9yYXJpbHkgZGlzYWJsZWQgLSB1c2luZyBvcmlnaW5hbCBjb25maWdcbiAgLy8gY29uc3Qgb3B0aW1pemVkU2NyZWVuc2hvdENvbmZpZyA9IE1pY3JvbGlua1NlcnZpY2Uub3B0aW1pemVWaWV3cG9ydEZvckZpbmFsU2l6ZShcbiAgLy8gICBmaW5hbFNjcmVlbnNob3RDb25maWcsXG4gIC8vICAgZmluYWxTdHlsZUNvbmZpZy5maW5hbFNpemVcbiAgLy8gKVxuICBjb25zdCBvcHRpbWl6ZWRTY3JlZW5zaG90Q29uZmlnID0gZmluYWxTY3JlZW5zaG90Q29uZmlnXG5cbiAgLy8gRmV0Y2ggc2NyZWVuc2hvdCBmcm9tIE1pY3JvbGlua1xuICBjb25zdCBzY3JlZW5zaG90QnVmZmVyID0gYXdhaXQgTWljcm9saW5rU2VydmljZS5mZXRjaFNjcmVlbnNob3Qob3B0aW1pemVkU2NyZWVuc2hvdENvbmZpZylcbiAgXG4gIC8vIEFwcGx5IGJyb3dzZXIgbW9ja3VwIGlmIHNwZWNpZmllZFxuICBsZXQgcHJvY2Vzc2VkQnVmZmVyID0gc2NyZWVuc2hvdEJ1ZmZlclxuICBpZiAoZmluYWxTdHlsZUNvbmZpZy5icm93c2VyTW9ja3VwICE9PSAnbm9uZScpIHtcbiAgICBwcm9jZXNzZWRCdWZmZXIgPSBhd2FpdCBCcm93c2VyTW9ja3VwU2VydmljZS5hcHBseU1vY2t1cChwcm9jZXNzZWRCdWZmZXIsIGZpbmFsU3R5bGVDb25maWcuYnJvd3Nlck1vY2t1cClcbiAgfVxuICBcbiAgLy8gQXBwbHkgc3R5bGluZyAoYm9yZGVycywgbWFyZ2lucywgZ3JhZGllbnRzLCBzaGFkb3dzKVxuICBwcm9jZXNzZWRCdWZmZXIgPSBhd2FpdCBJbWFnZVByb2Nlc3Nvci5wcm9jZXNzU2NyZWVuc2hvdChwcm9jZXNzZWRCdWZmZXIsIGZpbmFsU3R5bGVDb25maWcpXG4gIFxuICAvLyBHZXQgZmluYWwgZGltZW5zaW9uc1xuICBjb25zdCBzaGFycCA9IChhd2FpdCBpbXBvcnQoJ3NoYXJwJykpLmRlZmF1bHRcbiAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCBzaGFycChwcm9jZXNzZWRCdWZmZXIpLm1ldGFkYXRhKClcbiAgXG4gIHJldHVybiB7XG4gICAgYnVmZmVyOiBwcm9jZXNzZWRCdWZmZXIsXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIHdpZHRoOiBtZXRhZGF0YS53aWR0aCB8fCAwLFxuICAgICAgaGVpZ2h0OiBtZXRhZGF0YS5oZWlnaHQgfHwgMFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpXG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSBPYmplY3QuZnJvbUVudHJpZXMoc2VhcmNoUGFyYW1zLmVudHJpZXMoKSlcbiAgICBjb25zb2xlLmxvZygnUXVlcnkgcGFyYW1zIHJlY2VpdmVkOicsIHF1ZXJ5UGFyYW1zKVxuICAgIFxuICAgIGlmICghcXVlcnlQYXJhbXMudXJsKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZShcIk1pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiB1cmxcIilcbiAgICB9XG5cbiAgICAvLyBDbGVhbiB1cCBlbXB0eSBzdHJpbmcgcGFyYW1ldGVyc1xuICAgIGNvbnN0IGNsZWFuZWRQYXJhbXMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICBPYmplY3QuZW50cmllcyhxdWVyeVBhcmFtcykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gJycpXG4gICAgKVxuXG4gICAgY29uc3QgdmFsaWRhdGVkUXVlcnkgPSB2YWxpZGF0ZVNuYXBRdWVyeShjbGVhbmVkUGFyYW1zKVxuICAgIGNvbnN0IHNuYXBSZXF1ZXN0ID0gcXVlcnlUb1JlcXVlc3QodmFsaWRhdGVkUXVlcnkpXG4gICAgXG4gICAgY29uc3QgeyBidWZmZXIsIG1ldGFkYXRhIH0gPSBhd2FpdCBwcm9jZXNzU25hcHNob3QoXG4gICAgICBzbmFwUmVxdWVzdC51cmwsXG4gICAgICBzbmFwUmVxdWVzdC5zY3JlZW5zaG90LFxuICAgICAgc25hcFJlcXVlc3Quc3R5bGVcbiAgICApXG4gICAgXG4gICAgcmV0dXJuIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZShidWZmZXIsIHNuYXBSZXF1ZXN0LnVybCwgbWV0YWRhdGEpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignR0VUIC9hcGkvc25hcCBlcnJvcjonLCBlcnJvcilcbiAgICBcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ1pvZEVycm9yJykgfHwgZXJyb3IubmFtZSA9PT0gJ1pvZEVycm9yJykge1xuICAgICAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZShgVmFsaWRhdGlvbiBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWAsIDQwMClcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdTY3JlZW5zaG90IGZldGNoIGZhaWxlZCcpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKGBTY3JlZW5zaG90IGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCwgNTAzKVxuICAgICAgfVxuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ1Byb2Nlc3NpbmcgZXJyb3InKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdTaGFycCcpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKGBJbWFnZSBwcm9jZXNzaW5nIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCwgNTAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoYFNlcnZlciBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWAsIDUwMClcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoJ0ludGVybmFsIHNlcnZlciBlcnJvcicsIDUwMClcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKVxuICAgIGNvbnN0IHZhbGlkYXRlZFJlcXVlc3QgPSB2YWxpZGF0ZVNuYXBSZXF1ZXN0KGJvZHkpXG4gICAgXG4gICAgY29uc3QgeyBidWZmZXIsIG1ldGFkYXRhIH0gPSBhd2FpdCBwcm9jZXNzU25hcHNob3QoXG4gICAgICB2YWxpZGF0ZWRSZXF1ZXN0LnVybCxcbiAgICAgIHZhbGlkYXRlZFJlcXVlc3Quc2NyZWVuc2hvdCxcbiAgICAgIHZhbGlkYXRlZFJlcXVlc3Quc3R5bGVcbiAgICApXG4gICAgXG4gICAgcmV0dXJuIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZShidWZmZXIsIHZhbGlkYXRlZFJlcXVlc3QudXJsLCBtZXRhZGF0YSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdQT1NUIC9hcGkvc25hcCBlcnJvcjonLCBlcnJvcilcbiAgICBcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ1pvZEVycm9yJykgfHwgZXJyb3IubmFtZSA9PT0gJ1pvZEVycm9yJykge1xuICAgICAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZShgVmFsaWRhdGlvbiBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWAsIDQwMClcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdTY3JlZW5zaG90IGZldGNoIGZhaWxlZCcpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKGBTY3JlZW5zaG90IGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCwgNTAzKVxuICAgICAgfVxuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ1Byb2Nlc3NpbmcgZXJyb3InKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdTaGFycCcpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKGBJbWFnZSBwcm9jZXNzaW5nIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCwgNTAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoYFNlcnZlciBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWAsIDUwMClcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoJ0ludGVybmFsIHNlcnZlciBlcnJvcicsIDUwMClcbiAgfVxufSJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJNaWNyb2xpbmtTZXJ2aWNlIiwiSW1hZ2VQcm9jZXNzb3IiLCJCcm93c2VyTW9ja3VwU2VydmljZSIsInZhbGlkYXRlU25hcFJlcXVlc3QiLCJ2YWxpZGF0ZVNuYXBRdWVyeSIsInF1ZXJ5VG9SZXF1ZXN0IiwiY3JlYXRlRXJyb3JSZXNwb25zZSIsImVycm9yIiwic3RhdHVzIiwicmVzcG9uc2UiLCJzdWNjZXNzIiwianNvbiIsImNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSIsImltYWdlQnVmZmVyIiwidXJsIiwibWV0YWRhdGEiLCJpbWFnZVVybCIsInRvU3RyaW5nIiwib3JpZ2luYWxVcmwiLCJwcm9jZXNzZWRBdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImRpbWVuc2lvbnMiLCJwcm9jZXNzU25hcHNob3QiLCJzY3JlZW5zaG90Q29uZmlnIiwic3R5bGVDb25maWciLCJmaW5hbFNjcmVlbnNob3RDb25maWciLCJnZXREZWZhdWx0Q29uZmlnIiwiZmluYWxTdHlsZUNvbmZpZyIsImdldERlZmF1bHRTdHlsZSIsIm9wdGltaXplZFNjcmVlbnNob3RDb25maWciLCJzY3JlZW5zaG90QnVmZmVyIiwiZmV0Y2hTY3JlZW5zaG90IiwicHJvY2Vzc2VkQnVmZmVyIiwiYnJvd3Nlck1vY2t1cCIsImFwcGx5TW9ja3VwIiwicHJvY2Vzc1NjcmVlbnNob3QiLCJzaGFycCIsImRlZmF1bHQiLCJidWZmZXIiLCJ3aWR0aCIsImhlaWdodCIsIkdFVCIsInJlcXVlc3QiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJxdWVyeVBhcmFtcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsImNvbnNvbGUiLCJsb2ciLCJjbGVhbmVkUGFyYW1zIiwiZmlsdGVyIiwiXyIsInZhbHVlIiwidmFsaWRhdGVkUXVlcnkiLCJzbmFwUmVxdWVzdCIsInNjcmVlbnNob3QiLCJzdHlsZSIsIkVycm9yIiwibWVzc2FnZSIsImluY2x1ZGVzIiwibmFtZSIsIlBPU1QiLCJib2R5IiwidmFsaWRhdGVkUmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/snap/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/browser-mockup.ts":
/*!********************************************!*\
  !*** ./src/lib/services/browser-mockup.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserMockupService: () => (/* binding */ BrowserMockupService)\n/* harmony export */ });\n/* harmony import */ var sharp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sharp */ \"sharp\");\n/* harmony import */ var sharp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sharp__WEBPACK_IMPORTED_MODULE_0__);\n\nclass BrowserMockupService {\n    static{\n        this.MOCKUP_CONFIGS = {\n            safari: {\n                topBarHeight: 80,\n                borderRadius: 12,\n                backgroundColor: \"#f6f6f6\",\n                controlsColor: \"#ff5f56,#ffbd2e,#27ca3f\",\n                addressBarColor: \"#ffffff\",\n                addressBarHeight: 36,\n                titleBarHeight: 44\n            },\n            chrome: {\n                topBarHeight: 80,\n                borderRadius: 8,\n                backgroundColor: \"#f1f3f4\",\n                controlsColor: \"#ff5f56,#ffbd2e,#27ca3f\",\n                addressBarColor: \"#ffffff\",\n                addressBarHeight: 36,\n                titleBarHeight: 44\n            },\n            firefox: {\n                topBarHeight: 80,\n                borderRadius: 8,\n                backgroundColor: \"#f9f9fa\",\n                controlsColor: \"#ff5f56,#ffbd2e,#27ca3f\",\n                addressBarColor: \"#ffffff\",\n                addressBarHeight: 32,\n                titleBarHeight: 48\n            },\n            edge: {\n                topBarHeight: 80,\n                borderRadius: 8,\n                backgroundColor: \"#e5e5e5\",\n                controlsColor: \"#ff5f56,#ffbd2e,#27ca3f\",\n                addressBarColor: \"#ffffff\",\n                addressBarHeight: 34,\n                titleBarHeight: 46\n            }\n        };\n    }\n    static async applyMockup(imageBuffer, mockup) {\n        if (mockup === \"none\") {\n            return imageBuffer;\n        }\n        const config = this.MOCKUP_CONFIGS[mockup];\n        const image = sharp__WEBPACK_IMPORTED_MODULE_0___default()(imageBuffer);\n        const metadata = await image.metadata();\n        if (!metadata.width || !metadata.height) {\n            throw new Error(\"Invalid image dimensions for mockup\");\n        }\n        const mockupWidth = metadata.width + 20; // 10px padding on each side\n        const mockupHeight = metadata.height + config.topBarHeight + 20; // top bar + bottom padding\n        const mockupSvg = this.generateMockupSvg(mockupWidth, mockupHeight, config, mockup);\n        const mockupBuffer = Buffer.from(mockupSvg);\n        return sharp__WEBPACK_IMPORTED_MODULE_0___default()(mockupBuffer).composite([\n            {\n                input: imageBuffer,\n                left: 10,\n                top: config.topBarHeight + 10\n            }\n        ]).png().toBuffer();\n    }\n    static generateMockupSvg(width, height, config, browser) {\n        const controls = config.controlsColor.split(\",\");\n        return `\n      <svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n          <linearGradient id=\"topBarGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" style=\"stop-color:${config.backgroundColor};stop-opacity:1\" />\n            <stop offset=\"100%\" style=\"stop-color:#e0e0e0;stop-opacity:1\" />\n          </linearGradient>\n        </defs>\n        \n        <!-- Main container with rounded corners -->\n        <rect width=\"${width}\" height=\"${height}\" rx=\"${config.borderRadius}\" ry=\"${config.borderRadius}\" \n              fill=\"${config.backgroundColor}\" stroke=\"#d0d0d0\" stroke-width=\"1\"/>\n        \n        <!-- Top bar -->\n        <rect x=\"1\" y=\"1\" width=\"${width - 2}\" height=\"${config.titleBarHeight}\" \n              rx=\"${config.borderRadius}\" ry=\"${config.borderRadius}\" fill=\"url(#topBarGradient)\"/>\n        \n        <!-- Traffic lights -->\n        <circle cx=\"20\" cy=\"${config.titleBarHeight / 2}\" r=\"6\" fill=\"${controls[0]}\"/>\n        <circle cx=\"40\" cy=\"${config.titleBarHeight / 2}\" r=\"6\" fill=\"${controls[1]}\"/>\n        <circle cx=\"60\" cy=\"${config.titleBarHeight / 2}\" r=\"6\" fill=\"${controls[2]}\"/>\n        \n        <!-- Address bar -->\n        <rect x=\"90\" y=\"${(config.titleBarHeight - config.addressBarHeight) / 2}\" \n              width=\"${width - 120}\" height=\"${config.addressBarHeight}\" \n              rx=\"16\" ry=\"16\" fill=\"${config.addressBarColor}\" stroke=\"#d0d0d0\" stroke-width=\"1\"/>\n        \n        <!-- Address bar icon -->\n        <circle cx=\"105\" cy=\"${config.titleBarHeight / 2}\" r=\"8\" fill=\"#00c851\" opacity=\"0.7\"/>\n        \n        <!-- Separator line -->\n        <line x1=\"10\" y1=\"${config.titleBarHeight}\" x2=\"${width - 10}\" y2=\"${config.titleBarHeight}\" \n              stroke=\"#d0d0d0\" stroke-width=\"1\"/>\n      </svg>\n    `;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/browser-mockup.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/image-processor.ts":
/*!*********************************************!*\
  !*** ./src/lib/services/image-processor.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageProcessor: () => (/* binding */ ImageProcessor)\n/* harmony export */ });\n/* harmony import */ var sharp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sharp */ \"sharp\");\n/* harmony import */ var sharp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sharp__WEBPACK_IMPORTED_MODULE_0__);\n\nclass ImageProcessor {\n    static{\n        this.GRADIENT_ANGLES = {\n            \"to-r\": 90,\n            \"to-l\": 270,\n            \"to-t\": 0,\n            \"to-b\": 180,\n            \"to-br\": 135,\n            \"to-bl\": 225,\n            \"to-tr\": 45,\n            \"to-tl\": 315\n        };\n    }\n    static async processScreenshot(imageBuffer, style) {\n        const image = sharp__WEBPACK_IMPORTED_MODULE_0___default()(imageBuffer);\n        const metadata = await image.metadata();\n        if (!metadata.width || !metadata.height) {\n            throw new Error(\"Invalid image metadata\");\n        }\n        let processed = image;\n        if (style.borderRadius > 0) {\n            processed = await this.applyBorderRadius(processed, style.borderRadius, metadata.width, metadata.height);\n        }\n        if (style.margin > 0 || style.background.type !== \"solid\" || style.background.color !== \"transparent\") {\n            processed = await this.applyBackgroundAndMargin(processed, style.background, style.margin, metadata.width, metadata.height);\n        }\n        if (style.shadow.enabled) {\n            processed = await this.applyShadow(processed, style.shadow);\n        }\n        // Apply final size as the very last step to avoid dimension conflicts\n        // TODO: Temporarily disabled due to compositing issues\n        // if (style.finalSize) {\n        //   processed = await this.applyFinalSize(processed, style.finalSize);\n        // }\n        return processed.png().toBuffer();\n    }\n    static async applyBorderRadius(image, radius, width, height) {\n        // Get current image dimensions in case they've changed\n        const metadata = await image.metadata();\n        const currentWidth = metadata.width || width;\n        const currentHeight = metadata.height || height;\n        const mask = Buffer.from(`<svg width=\"${currentWidth}\" height=\"${currentHeight}\">\n        <rect x=\"0\" y=\"0\" width=\"${currentWidth}\" height=\"${currentHeight}\" rx=\"${radius}\" ry=\"${radius}\" fill=\"white\"/>\n      </svg>`);\n        return image.composite([\n            {\n                input: mask,\n                blend: \"dest-in\"\n            }\n        ]);\n    }\n    static async applyBackgroundAndMargin(image, background, margin, originalWidth, originalHeight) {\n        // Get current image dimensions in case they've changed\n        const metadata = await image.metadata();\n        const currentWidth = metadata.width || originalWidth;\n        const currentHeight = metadata.height || originalHeight;\n        const newWidth = currentWidth + margin * 2;\n        const newHeight = currentHeight + margin * 2;\n        let backgroundBuffer;\n        if (background.type === \"solid\") {\n            backgroundBuffer = await this.createSolidBackground(newWidth, newHeight, background.color);\n        } else {\n            backgroundBuffer = await this.createGradientBackground(newWidth, newHeight, background);\n        }\n        return sharp__WEBPACK_IMPORTED_MODULE_0___default()(backgroundBuffer).composite([\n            {\n                input: await image.toBuffer(),\n                left: margin,\n                top: margin\n            }\n        ]);\n    }\n    static async createSolidBackground(width, height, color) {\n        return sharp__WEBPACK_IMPORTED_MODULE_0___default()({\n            create: {\n                width,\n                height,\n                channels: 4,\n                background: color\n            }\n        }).png().toBuffer();\n    }\n    static async createGradientBackground(width, height, gradient) {\n        const angle = this.GRADIENT_ANGLES[gradient.direction];\n        const stops = gradient.colors.map(({ color, position = 50 })=>`<stop offset=\"${position}%\" stop-color=\"${color}\"/>`).join(\"\");\n        const svg = `\n      <svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n          <linearGradient id=\"grad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\" gradientTransform=\"rotate(${angle} 0.5 0.5)\">\n            ${stops}\n          </linearGradient>\n        </defs>\n        <rect width=\"100%\" height=\"100%\" fill=\"url(#grad)\"/>\n      </svg>\n    `;\n        return Buffer.from(svg);\n    }\n    static async applyShadow(image, shadow) {\n        const metadata = await image.metadata();\n        if (!metadata.width || !metadata.height) {\n            throw new Error(\"Cannot apply shadow to image without dimensions\");\n        }\n        const shadowWidth = metadata.width + Math.abs(shadow.offsetX) + shadow.blur * 2;\n        const shadowHeight = metadata.height + Math.abs(shadow.offsetY) + shadow.blur * 2;\n        const shadowSvg = `\n      <svg width=\"${shadowWidth}\" height=\"${shadowHeight}\">\n        <defs>\n          <filter id=\"shadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${shadow.blur}\"/>\n            <feOffset dx=\"${shadow.offsetX}\" dy=\"${shadow.offsetY}\" result=\"offset\"/>\n            <feFlood flood-color=\"${shadow.color}\" flood-opacity=\"${shadow.opacity}\"/>\n            <feComposite in=\"SourceGraphic\" operator=\"over\"/>\n          </filter>\n        </defs>\n        <rect width=\"100%\" height=\"100%\" fill=\"transparent\"/>\n      </svg>\n    `;\n        const shadowBuffer = Buffer.from(shadowSvg);\n        const baseX = Math.max(0, -shadow.offsetX) + shadow.blur;\n        const baseY = Math.max(0, -shadow.offsetY) + shadow.blur;\n        return sharp__WEBPACK_IMPORTED_MODULE_0___default()({\n            create: {\n                width: shadowWidth,\n                height: shadowHeight,\n                channels: 4,\n                background: {\n                    r: 0,\n                    g: 0,\n                    b: 0,\n                    alpha: 0\n                }\n            }\n        }).composite([\n            {\n                input: shadowBuffer,\n                blend: \"multiply\"\n            },\n            {\n                input: await image.toBuffer(),\n                left: baseX,\n                top: baseY\n            }\n        ]);\n    }\n    static async applyFinalSize(image, finalSize) {\n        const metadata = await image.metadata();\n        if (!metadata.width || !metadata.height) {\n            throw new Error(\"Cannot apply final size to image without dimensions\");\n        }\n        let targetWidth = finalSize.width;\n        let targetHeight = finalSize.height;\n        if (finalSize.aspectRatio) {\n            const [ratioW, ratioH] = finalSize.aspectRatio.split(\":\").map(Number);\n            const ratio = ratioW / ratioH;\n            if (finalSize.width && !finalSize.height) {\n                targetHeight = Math.round(finalSize.width / ratio);\n            } else if (finalSize.height && !finalSize.width) {\n                targetWidth = Math.round(finalSize.height * ratio);\n            } else if (!finalSize.width && !finalSize.height) {\n                const currentRatio = metadata.width / metadata.height;\n                if (ratio > currentRatio) {\n                    targetWidth = metadata.width;\n                    targetHeight = Math.round(metadata.width / ratio);\n                } else {\n                    targetHeight = metadata.height;\n                    targetWidth = Math.round(metadata.height * ratio);\n                }\n            }\n        }\n        if (!targetWidth && !targetHeight) {\n            return image;\n        }\n        let resizeOptions = {\n            fit: finalSize.maintainAspectRatio !== false ? \"inside\" : \"fill\",\n            withoutEnlargement: false\n        };\n        if (targetWidth && targetHeight) {\n            return image.resize(targetWidth, targetHeight, resizeOptions);\n        } else if (targetWidth) {\n            return image.resize(targetWidth, undefined, resizeOptions);\n        } else if (targetHeight) {\n            return image.resize(undefined, targetHeight, resizeOptions);\n        }\n        return image;\n    }\n    static getDefaultStyle() {\n        return {\n            borderRadius: 8,\n            margin: 32,\n            background: {\n                type: \"gradient\",\n                direction: \"to-br\",\n                colors: [\n                    {\n                        color: \"#667eea\",\n                        position: 0\n                    },\n                    {\n                        color: \"#764ba2\",\n                        position: 100\n                    }\n                ]\n            },\n            browserMockup: \"none\",\n            shadow: {\n                enabled: true,\n                blur: 20,\n                offsetX: 0,\n                offsetY: 10,\n                color: \"#000000\",\n                opacity: 0.15\n            }\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3NlcnZpY2VzL2ltYWdlLXByb2Nlc3Nvci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEI7QUFHbkIsTUFBTUM7O2FBQ2FDLGtCQUFxRDtZQUMzRSxRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsU0FBUztZQUNULFNBQVM7WUFDVCxTQUFTO1lBQ1QsU0FBUztRQUNYOztJQUVBLGFBQWFDLGtCQUFrQkMsV0FBbUIsRUFBRUMsS0FBa0IsRUFBbUI7UUFDdkYsTUFBTUMsUUFBUU4sNENBQUtBLENBQUNJO1FBQ3BCLE1BQU1HLFdBQVcsTUFBTUQsTUFBTUMsUUFBUTtRQUVyQyxJQUFJLENBQUNBLFNBQVNDLEtBQUssSUFBSSxDQUFDRCxTQUFTRSxNQUFNLEVBQUU7WUFDdkMsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBRUEsSUFBSUMsWUFBWUw7UUFFaEIsSUFBSUQsTUFBTU8sWUFBWSxHQUFHLEdBQUc7WUFDMUJELFlBQVksTUFBTSxJQUFJLENBQUNFLGlCQUFpQixDQUFDRixXQUFXTixNQUFNTyxZQUFZLEVBQUVMLFNBQVNDLEtBQUssRUFBRUQsU0FBU0UsTUFBTTtRQUN6RztRQUVBLElBQUlKLE1BQU1TLE1BQU0sR0FBRyxLQUFLVCxNQUFNVSxVQUFVLENBQUNDLElBQUksS0FBSyxXQUFXWCxNQUFNVSxVQUFVLENBQUNFLEtBQUssS0FBSyxlQUFlO1lBQ3JHTixZQUFZLE1BQU0sSUFBSSxDQUFDTyx3QkFBd0IsQ0FDN0NQLFdBQ0FOLE1BQU1VLFVBQVUsRUFDaEJWLE1BQU1TLE1BQU0sRUFDWlAsU0FBU0MsS0FBSyxFQUNkRCxTQUFTRSxNQUFNO1FBRW5CO1FBRUEsSUFBSUosTUFBTWMsTUFBTSxDQUFDQyxPQUFPLEVBQUU7WUFDeEJULFlBQVksTUFBTSxJQUFJLENBQUNVLFdBQVcsQ0FBQ1YsV0FBV04sTUFBTWMsTUFBTTtRQUM1RDtRQUVBLHNFQUFzRTtRQUN0RSx1REFBdUQ7UUFDdkQseUJBQXlCO1FBQ3pC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QUFDUCxlQUFlLENBQUNDLGNBQWM7WUFDakMsT0FBT25FO1FBQ1Q7UUFFQSxJQUFJNEUsZ0JBQXFDO1lBQ3ZDQyxLQUFLWixVQUFVYSxtQkFBbUIsS0FBSyxRQUFRLFdBQVc7WUFDMURDLG9CQUFvQjtRQUN0QjtRQUVBLElBQUliLGVBQWVDLGNBQWM7WUFDL0IsT0FBT25FLE1BQU1nRixNQUFNLENBQUNkLGFBQWFDLGNBQWNTO1FBQ2pELE9BQU8sSUFBSVYsYUFBYTtZQUN0QixPQUFPbEUsTUFBTWdGLE1BQU0sQ0FBQ2QsYUFBYWUsV0FBV0w7UUFDOUMsT0FBTyxJQUFJVCxjQUFjO1lBQ3ZCLE9BQU9uRSxNQUFNZ0YsTUFBTSxDQUFDQyxXQUFXZCxjQUFjUztRQUMvQztRQUVBLE9BQU81RTtJQUNUO0lBRUEsT0FBT2tGLGtCQUErQjtRQUNwQyxPQUFPO1lBQ0w1RSxjQUFjO1lBQ2RFLFFBQVE7WUFDUkMsWUFBWTtnQkFDVkMsTUFBTTtnQkFDTjhCLFdBQVc7Z0JBQ1hFLFFBQVE7b0JBQ047d0JBQUUvQixPQUFPO3dCQUFXaUMsVUFBVTtvQkFBRTtvQkFDaEM7d0JBQUVqQyxPQUFPO3dCQUFXaUMsVUFBVTtvQkFBSTtpQkFDbkM7WUFDSDtZQUNBdUMsZUFBZTtZQUNmdEUsUUFBUTtnQkFDTkMsU0FBUztnQkFDVHFDLE1BQU07Z0JBQ05ELFNBQVM7Z0JBQ1RHLFNBQVM7Z0JBQ1QxQyxPQUFPO2dCQUNQNEMsU0FBUztZQUNYO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25hcC8uL3NyYy9saWIvc2VydmljZXMvaW1hZ2UtcHJvY2Vzc29yLnRzP2Y2MDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB0eXBlIHsgU3R5bGVDb25maWcsIEJhY2tncm91bmRTdHlsZSwgR3JhZGllbnREaXJlY3Rpb24sIEZpbmFsSW1hZ2VTaXplIH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuXG5leHBvcnQgY2xhc3MgSW1hZ2VQcm9jZXNzb3Ige1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBHUkFESUVOVF9BTkdMRVM6IFJlY29yZDxHcmFkaWVudERpcmVjdGlvbiwgbnVtYmVyPiA9IHtcbiAgICAndG8tcic6IDkwLFxuICAgICd0by1sJzogMjcwLFxuICAgICd0by10JzogMCxcbiAgICAndG8tYic6IDE4MCxcbiAgICAndG8tYnInOiAxMzUsXG4gICAgJ3RvLWJsJzogMjI1LFxuICAgICd0by10cic6IDQ1LFxuICAgICd0by10bCc6IDMxNSxcbiAgfTtcblxuICBzdGF0aWMgYXN5bmMgcHJvY2Vzc1NjcmVlbnNob3QoaW1hZ2VCdWZmZXI6IEJ1ZmZlciwgc3R5bGU6IFN0eWxlQ29uZmlnKTogUHJvbWlzZTxCdWZmZXI+IHtcbiAgICBjb25zdCBpbWFnZSA9IHNoYXJwKGltYWdlQnVmZmVyKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IGltYWdlLm1ldGFkYXRhKCk7XG4gICAgXG4gICAgaWYgKCFtZXRhZGF0YS53aWR0aCB8fCAhbWV0YWRhdGEuaGVpZ2h0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW1hZ2UgbWV0YWRhdGEnKTtcbiAgICB9XG5cbiAgICBsZXQgcHJvY2Vzc2VkID0gaW1hZ2U7XG5cbiAgICBpZiAoc3R5bGUuYm9yZGVyUmFkaXVzID4gMCkge1xuICAgICAgcHJvY2Vzc2VkID0gYXdhaXQgdGhpcy5hcHBseUJvcmRlclJhZGl1cyhwcm9jZXNzZWQsIHN0eWxlLmJvcmRlclJhZGl1cywgbWV0YWRhdGEud2lkdGgsIG1ldGFkYXRhLmhlaWdodCk7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLm1hcmdpbiA+IDAgfHwgc3R5bGUuYmFja2dyb3VuZC50eXBlICE9PSAnc29saWQnIHx8IHN0eWxlLmJhY2tncm91bmQuY29sb3IgIT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgIHByb2Nlc3NlZCA9IGF3YWl0IHRoaXMuYXBwbHlCYWNrZ3JvdW5kQW5kTWFyZ2luKFxuICAgICAgICBwcm9jZXNzZWQsXG4gICAgICAgIHN0eWxlLmJhY2tncm91bmQsXG4gICAgICAgIHN0eWxlLm1hcmdpbixcbiAgICAgICAgbWV0YWRhdGEud2lkdGgsXG4gICAgICAgIG1ldGFkYXRhLmhlaWdodFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUuc2hhZG93LmVuYWJsZWQpIHtcbiAgICAgIHByb2Nlc3NlZCA9IGF3YWl0IHRoaXMuYXBwbHlTaGFkb3cocHJvY2Vzc2VkLCBzdHlsZS5zaGFkb3cpO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IGZpbmFsIHNpemUgYXMgdGhlIHZlcnkgbGFzdCBzdGVwIHRvIGF2b2lkIGRpbWVuc2lvbiBjb25mbGljdHNcbiAgICAvLyBUT0RPOiBUZW1wb3JhcmlseSBkaXNhYmxlZCBkdWUgdG8gY29tcG9zaXRpbmcgaXNzdWVzXG4gICAgLy8gaWYgKHN0eWxlLmZpbmFsU2l6ZSkge1xuICAgIC8vICAgcHJvY2Vzc2VkID0gYXdhaXQgdGhpcy5hcHBseUZpbmFsU2l6ZShwcm9jZXNzZWQsIHN0eWxlLmZpbmFsU2l6ZSk7XG4gICAgLy8gfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZC5wbmcoKS50b0J1ZmZlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgYXBwbHlCb3JkZXJSYWRpdXMoXG4gICAgaW1hZ2U6IHNoYXJwLlNoYXJwLFxuICAgIHJhZGl1czogbnVtYmVyLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXJcbiAgKTogUHJvbWlzZTxzaGFycC5TaGFycD4ge1xuICAgIC8vIEdldCBjdXJyZW50IGltYWdlIGRpbWVuc2lvbnMgaW4gY2FzZSB0aGV5J3ZlIGNoYW5nZWRcbiAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IGltYWdlLm1ldGFkYXRhKCk7XG4gICAgY29uc3QgY3VycmVudFdpZHRoID0gbWV0YWRhdGEud2lkdGggfHwgd2lkdGg7XG4gICAgY29uc3QgY3VycmVudEhlaWdodCA9IG1ldGFkYXRhLmhlaWdodCB8fCBoZWlnaHQ7XG5cbiAgICBjb25zdCBtYXNrID0gQnVmZmVyLmZyb20oXG4gICAgICBgPHN2ZyB3aWR0aD1cIiR7Y3VycmVudFdpZHRofVwiIGhlaWdodD1cIiR7Y3VycmVudEhlaWdodH1cIj5cbiAgICAgICAgPHJlY3QgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiJHtjdXJyZW50V2lkdGh9XCIgaGVpZ2h0PVwiJHtjdXJyZW50SGVpZ2h0fVwiIHJ4PVwiJHtyYWRpdXN9XCIgcnk9XCIke3JhZGl1c31cIiBmaWxsPVwid2hpdGVcIi8+XG4gICAgICA8L3N2Zz5gXG4gICAgKTtcblxuICAgIHJldHVybiBpbWFnZS5jb21wb3NpdGUoW1xuICAgICAge1xuICAgICAgICBpbnB1dDogbWFzayxcbiAgICAgICAgYmxlbmQ6ICdkZXN0LWluJ1xuICAgICAgfVxuICAgIF0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgYXBwbHlCYWNrZ3JvdW5kQW5kTWFyZ2luKFxuICAgIGltYWdlOiBzaGFycC5TaGFycCxcbiAgICBiYWNrZ3JvdW5kOiBCYWNrZ3JvdW5kU3R5bGUsXG4gICAgbWFyZ2luOiBudW1iZXIsXG4gICAgb3JpZ2luYWxXaWR0aDogbnVtYmVyLFxuICAgIG9yaWdpbmFsSGVpZ2h0OiBudW1iZXJcbiAgKTogUHJvbWlzZTxzaGFycC5TaGFycD4ge1xuICAgIC8vIEdldCBjdXJyZW50IGltYWdlIGRpbWVuc2lvbnMgaW4gY2FzZSB0aGV5J3ZlIGNoYW5nZWRcbiAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IGltYWdlLm1ldGFkYXRhKCk7XG4gICAgY29uc3QgY3VycmVudFdpZHRoID0gbWV0YWRhdGEud2lkdGggfHwgb3JpZ2luYWxXaWR0aDtcbiAgICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gbWV0YWRhdGEuaGVpZ2h0IHx8IG9yaWdpbmFsSGVpZ2h0O1xuXG4gICAgY29uc3QgbmV3V2lkdGggPSBjdXJyZW50V2lkdGggKyAobWFyZ2luICogMik7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gY3VycmVudEhlaWdodCArIChtYXJnaW4gKiAyKTtcblxuICAgIGxldCBiYWNrZ3JvdW5kQnVmZmVyOiBCdWZmZXI7XG5cbiAgICBpZiAoYmFja2dyb3VuZC50eXBlID09PSAnc29saWQnKSB7XG4gICAgICBiYWNrZ3JvdW5kQnVmZmVyID0gYXdhaXQgdGhpcy5jcmVhdGVTb2xpZEJhY2tncm91bmQobmV3V2lkdGgsIG5ld0hlaWdodCwgYmFja2dyb3VuZC5jb2xvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhY2tncm91bmRCdWZmZXIgPSBhd2FpdCB0aGlzLmNyZWF0ZUdyYWRpZW50QmFja2dyb3VuZChuZXdXaWR0aCwgbmV3SGVpZ2h0LCBiYWNrZ3JvdW5kKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hhcnAoYmFja2dyb3VuZEJ1ZmZlcikuY29tcG9zaXRlKFtcbiAgICAgIHtcbiAgICAgICAgaW5wdXQ6IGF3YWl0IGltYWdlLnRvQnVmZmVyKCksXG4gICAgICAgIGxlZnQ6IG1hcmdpbixcbiAgICAgICAgdG9wOiBtYXJnaW5cbiAgICAgIH1cbiAgICBdKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIGNyZWF0ZVNvbGlkQmFja2dyb3VuZCh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgY29sb3I6IHN0cmluZyk6IFByb21pc2U8QnVmZmVyPiB7XG4gICAgcmV0dXJuIHNoYXJwKHtcbiAgICAgIGNyZWF0ZToge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBjaGFubmVsczogNCxcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3JcbiAgICAgIH1cbiAgICB9KS5wbmcoKS50b0J1ZmZlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY3JlYXRlR3JhZGllbnRCYWNrZ3JvdW5kKFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgZ3JhZGllbnQ6IEV4dHJhY3Q8QmFja2dyb3VuZFN0eWxlLCB7IHR5cGU6ICdncmFkaWVudCcgfT5cbiAgKTogUHJvbWlzZTxCdWZmZXI+IHtcbiAgICBjb25zdCBhbmdsZSA9IHRoaXMuR1JBRElFTlRfQU5HTEVTW2dyYWRpZW50LmRpcmVjdGlvbl07XG4gICAgY29uc3Qgc3RvcHMgPSBncmFkaWVudC5jb2xvcnNcbiAgICAgIC5tYXAoKHsgY29sb3IsIHBvc2l0aW9uID0gNTAgfSkgPT4gYDxzdG9wIG9mZnNldD1cIiR7cG9zaXRpb259JVwiIHN0b3AtY29sb3I9XCIke2NvbG9yfVwiLz5gKVxuICAgICAgLmpvaW4oJycpO1xuXG4gICAgY29uc3Qgc3ZnID0gYFxuICAgICAgPHN2ZyB3aWR0aD1cIiR7d2lkdGh9XCIgaGVpZ2h0PVwiJHtoZWlnaHR9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICA8ZGVmcz5cbiAgICAgICAgICA8bGluZWFyR3JhZGllbnQgaWQ9XCJncmFkXCIgeDE9XCIwJVwiIHkxPVwiMCVcIiB4Mj1cIjEwMCVcIiB5Mj1cIjAlXCIgZ3JhZGllbnRUcmFuc2Zvcm09XCJyb3RhdGUoJHthbmdsZX0gMC41IDAuNSlcIj5cbiAgICAgICAgICAgICR7c3RvcHN9XG4gICAgICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgICAgICAgPC9kZWZzPlxuICAgICAgICA8cmVjdCB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cInVybCgjZ3JhZClcIi8+XG4gICAgICA8L3N2Zz5cbiAgICBgO1xuXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN2Zyk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBhcHBseVNoYWRvdyhcbiAgICBpbWFnZTogc2hhcnAuU2hhcnAsXG4gICAgc2hhZG93OiBTdHlsZUNvbmZpZ1snc2hhZG93J11cbiAgKTogUHJvbWlzZTxzaGFycC5TaGFycD4ge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgaW1hZ2UubWV0YWRhdGEoKTtcbiAgICBpZiAoIW1ldGFkYXRhLndpZHRoIHx8ICFtZXRhZGF0YS5oZWlnaHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFwcGx5IHNoYWRvdyB0byBpbWFnZSB3aXRob3V0IGRpbWVuc2lvbnMnKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaGFkb3dXaWR0aCA9IG1ldGFkYXRhLndpZHRoICsgTWF0aC5hYnMoc2hhZG93Lm9mZnNldFgpICsgKHNoYWRvdy5ibHVyICogMik7XG4gICAgY29uc3Qgc2hhZG93SGVpZ2h0ID0gbWV0YWRhdGEuaGVpZ2h0ICsgTWF0aC5hYnMoc2hhZG93Lm9mZnNldFkpICsgKHNoYWRvdy5ibHVyICogMik7XG5cbiAgICBjb25zdCBzaGFkb3dTdmcgPSBgXG4gICAgICA8c3ZnIHdpZHRoPVwiJHtzaGFkb3dXaWR0aH1cIiBoZWlnaHQ9XCIke3NoYWRvd0hlaWdodH1cIj5cbiAgICAgICAgPGRlZnM+XG4gICAgICAgICAgPGZpbHRlciBpZD1cInNoYWRvd1wiIHg9XCItNTAlXCIgeT1cIi01MCVcIiB3aWR0aD1cIjIwMCVcIiBoZWlnaHQ9XCIyMDAlXCI+XG4gICAgICAgICAgICA8ZmVHYXVzc2lhbkJsdXIgaW49XCJTb3VyY2VHcmFwaGljXCIgc3RkRGV2aWF0aW9uPVwiJHtzaGFkb3cuYmx1cn1cIi8+XG4gICAgICAgICAgICA8ZmVPZmZzZXQgZHg9XCIke3NoYWRvdy5vZmZzZXRYfVwiIGR5PVwiJHtzaGFkb3cub2Zmc2V0WX1cIiByZXN1bHQ9XCJvZmZzZXRcIi8+XG4gICAgICAgICAgICA8ZmVGbG9vZCBmbG9vZC1jb2xvcj1cIiR7c2hhZG93LmNvbG9yfVwiIGZsb29kLW9wYWNpdHk9XCIke3NoYWRvdy5vcGFjaXR5fVwiLz5cbiAgICAgICAgICAgIDxmZUNvbXBvc2l0ZSBpbj1cIlNvdXJjZUdyYXBoaWNcIiBvcGVyYXRvcj1cIm92ZXJcIi8+XG4gICAgICAgICAgPC9maWx0ZXI+XG4gICAgICAgIDwvZGVmcz5cbiAgICAgICAgPHJlY3Qgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIGZpbGw9XCJ0cmFuc3BhcmVudFwiLz5cbiAgICAgIDwvc3ZnPlxuICAgIGA7XG5cbiAgICBjb25zdCBzaGFkb3dCdWZmZXIgPSBCdWZmZXIuZnJvbShzaGFkb3dTdmcpO1xuICAgIGNvbnN0IGJhc2VYID0gTWF0aC5tYXgoMCwgLXNoYWRvdy5vZmZzZXRYKSArIHNoYWRvdy5ibHVyO1xuICAgIGNvbnN0IGJhc2VZID0gTWF0aC5tYXgoMCwgLXNoYWRvdy5vZmZzZXRZKSArIHNoYWRvdy5ibHVyO1xuXG4gICAgcmV0dXJuIHNoYXJwKHtcbiAgICAgIGNyZWF0ZToge1xuICAgICAgICB3aWR0aDogc2hhZG93V2lkdGgsXG4gICAgICAgIGhlaWdodDogc2hhZG93SGVpZ2h0LFxuICAgICAgICBjaGFubmVsczogNCxcbiAgICAgICAgYmFja2dyb3VuZDogeyByOiAwLCBnOiAwLCBiOiAwLCBhbHBoYTogMCB9XG4gICAgICB9XG4gICAgfSkuY29tcG9zaXRlKFtcbiAgICAgIHtcbiAgICAgICAgaW5wdXQ6IHNoYWRvd0J1ZmZlcixcbiAgICAgICAgYmxlbmQ6ICdtdWx0aXBseSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlucHV0OiBhd2FpdCBpbWFnZS50b0J1ZmZlcigpLFxuICAgICAgICBsZWZ0OiBiYXNlWCxcbiAgICAgICAgdG9wOiBiYXNlWVxuICAgICAgfVxuICAgIF0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgYXBwbHlGaW5hbFNpemUoXG4gICAgaW1hZ2U6IHNoYXJwLlNoYXJwLFxuICAgIGZpbmFsU2l6ZTogRmluYWxJbWFnZVNpemVcbiAgKTogUHJvbWlzZTxzaGFycC5TaGFycD4ge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgaW1hZ2UubWV0YWRhdGEoKTtcbiAgICBpZiAoIW1ldGFkYXRhLndpZHRoIHx8ICFtZXRhZGF0YS5oZWlnaHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFwcGx5IGZpbmFsIHNpemUgdG8gaW1hZ2Ugd2l0aG91dCBkaW1lbnNpb25zJyk7XG4gICAgfVxuXG4gICAgbGV0IHRhcmdldFdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWQgPSBmaW5hbFNpemUud2lkdGg7XG4gICAgbGV0IHRhcmdldEhlaWdodDogbnVtYmVyIHwgdW5kZWZpbmVkID0gZmluYWxTaXplLmhlaWdodDtcblxuICAgIGlmIChmaW5hbFNpemUuYXNwZWN0UmF0aW8pIHtcbiAgICAgIGNvbnN0IFtyYXRpb1csIHJhdGlvSF0gPSBmaW5hbFNpemUuYXNwZWN0UmF0aW8uc3BsaXQoJzonKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNvbnN0IHJhdGlvID0gcmF0aW9XIC8gcmF0aW9IO1xuXG4gICAgICBpZiAoZmluYWxTaXplLndpZHRoICYmICFmaW5hbFNpemUuaGVpZ2h0KSB7XG4gICAgICAgIHRhcmdldEhlaWdodCA9IE1hdGgucm91bmQoZmluYWxTaXplLndpZHRoIC8gcmF0aW8pO1xuICAgICAgfSBlbHNlIGlmIChmaW5hbFNpemUuaGVpZ2h0ICYmICFmaW5hbFNpemUud2lkdGgpIHtcbiAgICAgICAgdGFyZ2V0V2lkdGggPSBNYXRoLnJvdW5kKGZpbmFsU2l6ZS5oZWlnaHQgKiByYXRpbyk7XG4gICAgICB9IGVsc2UgaWYgKCFmaW5hbFNpemUud2lkdGggJiYgIWZpbmFsU2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFJhdGlvID0gbWV0YWRhdGEud2lkdGggLyBtZXRhZGF0YS5oZWlnaHQ7XG4gICAgICAgIGlmIChyYXRpbyA+IGN1cnJlbnRSYXRpbykge1xuICAgICAgICAgIHRhcmdldFdpZHRoID0gbWV0YWRhdGEud2lkdGg7XG4gICAgICAgICAgdGFyZ2V0SGVpZ2h0ID0gTWF0aC5yb3VuZChtZXRhZGF0YS53aWR0aCAvIHJhdGlvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRIZWlnaHQgPSBtZXRhZGF0YS5oZWlnaHQ7XG4gICAgICAgICAgdGFyZ2V0V2lkdGggPSBNYXRoLnJvdW5kKG1ldGFkYXRhLmhlaWdodCAqIHJhdGlvKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGFyZ2V0V2lkdGggJiYgIXRhcmdldEhlaWdodCkge1xuICAgICAgcmV0dXJuIGltYWdlO1xuICAgIH1cblxuICAgIGxldCByZXNpemVPcHRpb25zOiBzaGFycC5SZXNpemVPcHRpb25zID0ge1xuICAgICAgZml0OiBmaW5hbFNpemUubWFpbnRhaW5Bc3BlY3RSYXRpbyAhPT0gZmFsc2UgPyAnaW5zaWRlJyA6ICdmaWxsJyxcbiAgICAgIHdpdGhvdXRFbmxhcmdlbWVudDogZmFsc2VcbiAgICB9O1xuXG4gICAgaWYgKHRhcmdldFdpZHRoICYmIHRhcmdldEhlaWdodCkge1xuICAgICAgcmV0dXJuIGltYWdlLnJlc2l6ZSh0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0LCByZXNpemVPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldFdpZHRoKSB7XG4gICAgICByZXR1cm4gaW1hZ2UucmVzaXplKHRhcmdldFdpZHRoLCB1bmRlZmluZWQsIHJlc2l6ZU9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0SGVpZ2h0KSB7XG4gICAgICByZXR1cm4gaW1hZ2UucmVzaXplKHVuZGVmaW5lZCwgdGFyZ2V0SGVpZ2h0LCByZXNpemVPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW1hZ2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVmYXVsdFN0eWxlKCk6IFN0eWxlQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgbWFyZ2luOiAzMixcbiAgICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgdHlwZTogJ2dyYWRpZW50JyxcbiAgICAgICAgZGlyZWN0aW9uOiAndG8tYnInLFxuICAgICAgICBjb2xvcnM6IFtcbiAgICAgICAgICB7IGNvbG9yOiAnIzY2N2VlYScsIHBvc2l0aW9uOiAwIH0sXG4gICAgICAgICAgeyBjb2xvcjogJyM3NjRiYTInLCBwb3NpdGlvbjogMTAwIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGJyb3dzZXJNb2NrdXA6ICdub25lJyxcbiAgICAgIHNoYWRvdzoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBibHVyOiAyMCxcbiAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgb2Zmc2V0WTogMTAsXG4gICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgIG9wYWNpdHk6IDAuMTVcbiAgICAgIH1cbiAgICB9O1xuICB9XG59Il0sIm5hbWVzIjpbInNoYXJwIiwiSW1hZ2VQcm9jZXNzb3IiLCJHUkFESUVOVF9BTkdMRVMiLCJwcm9jZXNzU2NyZWVuc2hvdCIsImltYWdlQnVmZmVyIiwic3R5bGUiLCJpbWFnZSIsIm1ldGFkYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJFcnJvciIsInByb2Nlc3NlZCIsImJvcmRlclJhZGl1cyIsImFwcGx5Qm9yZGVyUmFkaXVzIiwibWFyZ2luIiwiYmFja2dyb3VuZCIsInR5cGUiLCJjb2xvciIsImFwcGx5QmFja2dyb3VuZEFuZE1hcmdpbiIsInNoYWRvdyIsImVuYWJsZWQiLCJhcHBseVNoYWRvdyIsInBuZyIsInRvQnVmZmVyIiwicmFkaXVzIiwiY3VycmVudFdpZHRoIiwiY3VycmVudEhlaWdodCIsIm1hc2siLCJCdWZmZXIiLCJmcm9tIiwiY29tcG9zaXRlIiwiaW5wdXQiLCJibGVuZCIsIm9yaWdpbmFsV2lkdGgiLCJvcmlnaW5hbEhlaWdodCIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0IiwiYmFja2dyb3VuZEJ1ZmZlciIsImNyZWF0ZVNvbGlkQmFja2dyb3VuZCIsImNyZWF0ZUdyYWRpZW50QmFja2dyb3VuZCIsImxlZnQiLCJ0b3AiLCJjcmVhdGUiLCJjaGFubmVscyIsImdyYWRpZW50IiwiYW5nbGUiLCJkaXJlY3Rpb24iLCJzdG9wcyIsImNvbG9ycyIsIm1hcCIsInBvc2l0aW9uIiwiam9pbiIsInN2ZyIsInNoYWRvd1dpZHRoIiwiTWF0aCIsImFicyIsIm9mZnNldFgiLCJibHVyIiwic2hhZG93SGVpZ2h0Iiwib2Zmc2V0WSIsInNoYWRvd1N2ZyIsIm9wYWNpdHkiLCJzaGFkb3dCdWZmZXIiLCJiYXNlWCIsIm1heCIsImJhc2VZIiwiciIsImciLCJiIiwiYWxwaGEiLCJhcHBseUZpbmFsU2l6ZSIsImZpbmFsU2l6ZSIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiYXNwZWN0UmF0aW8iLCJyYXRpb1ciLCJyYXRpb0giLCJzcGxpdCIsIk51bWJlciIsInJhdGlvIiwicm91bmQiLCJjdXJyZW50UmF0aW8iLCJyZXNpemVPcHRpb25zIiwiZml0IiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsIndpdGhvdXRFbmxhcmdlbWVudCIsInJlc2l6ZSIsInVuZGVmaW5lZCIsImdldERlZmF1bHRTdHlsZSIsImJyb3dzZXJNb2NrdXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/image-processor.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/microlink.ts":
/*!***************************************!*\
  !*** ./src/lib/services/microlink.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MicrolinkService: () => (/* binding */ MicrolinkService)\n/* harmony export */ });\nconst MICROLINK_API_BASE = \"https://api.microlink.io\";\nclass MicrolinkService {\n    static optimizeViewportForFinalSize(config, finalSize) {\n        if (!finalSize) return config;\n        const optimizedConfig = {\n            ...config\n        };\n        let { width, height } = config.viewport;\n        // Parse aspect ratio if provided\n        if (finalSize.aspectRatio) {\n            const [ratioW, ratioH] = finalSize.aspectRatio.split(\":\").map(Number);\n            const ratio = ratioW / ratioH;\n            if (finalSize.width && !finalSize.height) {\n                // Width specified, calculate height from aspect ratio\n                height = Math.round(finalSize.width / ratio);\n                width = finalSize.width;\n            } else if (finalSize.height && !finalSize.width) {\n                // Height specified, calculate width from aspect ratio\n                width = Math.round(finalSize.height * ratio);\n                height = finalSize.height;\n            } else if (finalSize.width && finalSize.height) {\n                // Both specified, use them directly\n                width = finalSize.width;\n                height = finalSize.height;\n            } else {\n                // Only aspect ratio specified, use default size with correct ratio\n                if (ratio > 1) {\n                    // Landscape\n                    width = 1920;\n                    height = Math.round(1920 / ratio);\n                } else {\n                    // Portrait or square\n                    height = 1080;\n                    width = Math.round(1080 * ratio);\n                }\n            }\n        } else {\n            // No aspect ratio, use specified dimensions or defaults\n            if (finalSize.width) width = finalSize.width;\n            if (finalSize.height) height = finalSize.height;\n        }\n        // Ensure minimum sizes for Microlink\n        width = Math.max(320, width);\n        height = Math.max(240, height);\n        optimizedConfig.viewport = {\n            ...config.viewport,\n            width,\n            height\n        };\n        return optimizedConfig;\n    }\n    static getScreenshotUrl(config) {\n        const params = new URLSearchParams({\n            url: config.url,\n            screenshot: \"true\",\n            waitUntil: config.waitUntil,\n            meta: \"false\",\n            embed: \"screenshot.url\",\n            colorScheme: config.colorScheme,\n            \"viewport.isMobile\": config.viewport.isMobile.toString(),\n            \"viewport.deviceScaleFactor\": config.viewport.deviceScaleFactor.toString(),\n            \"viewport.width\": config.viewport.width.toString(),\n            \"viewport.height\": config.viewport.height.toString(),\n            delay: config.delay.toString()\n        });\n        return `${MICROLINK_API_BASE}?${params.toString()}`;\n    }\n    static async fetchScreenshot(config) {\n        const apiUrl = this.getScreenshotUrl(config);\n        try {\n            console.log(`Fetching screenshot from: ${apiUrl}`);\n            const response = await fetch(apiUrl, {\n                headers: {\n                    \"User-Agent\": \"Snap-API/1.0.0\"\n                }\n            });\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new Error(`Microlink API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const contentType = response.headers.get(\"content-type\");\n            console.log(`Response content-type: ${contentType}`);\n            // Handle direct image response (when embed=screenshot.url returns the image directly)\n            if (contentType && contentType.startsWith(\"image/\")) {\n                console.log(\"Received direct image response from Microlink\");\n                const imageBuffer = await response.arrayBuffer();\n                if (imageBuffer.byteLength === 0) {\n                    throw new Error(\"Received empty image buffer\");\n                }\n                return Buffer.from(imageBuffer);\n            }\n            // Handle JSON response (traditional API response with screenshot URL)\n            if (!contentType || !contentType.includes(\"application/json\")) {\n                throw new Error(`Unexpected content-type: ${contentType}. Expected JSON or image.`);\n            }\n            let data;\n            try {\n                data = await response.json();\n            } catch (parseError) {\n                const responseText = await response.text().catch(()=>\"Unable to read response\");\n                throw new Error(`Failed to parse JSON response: ${responseText.slice(0, 200)}...`);\n            }\n            if (data.status !== \"success\") {\n                throw new Error(`Microlink API returned error status: ${data.status}`);\n            }\n            if (!data.data?.screenshot?.url) {\n                throw new Error(`Screenshot URL not found in response: ${JSON.stringify(data).slice(0, 200)}`);\n            }\n            console.log(`Downloading image from: ${data.data.screenshot.url}`);\n            const imageResponse = await fetch(data.data.screenshot.url);\n            if (!imageResponse.ok) {\n                throw new Error(`Failed to fetch screenshot image: ${imageResponse.status} ${imageResponse.statusText}`);\n            }\n            const imageBuffer = await imageResponse.arrayBuffer();\n            if (imageBuffer.byteLength === 0) {\n                throw new Error(\"Received empty image buffer\");\n            }\n            return Buffer.from(imageBuffer);\n        } catch (error) {\n            if (error instanceof Error) {\n                // Re-throw with more context\n                throw new Error(`Screenshot fetch failed: ${error.message}`);\n            }\n            throw new Error(\"Screenshot fetch failed: Unknown error\");\n        }\n    }\n    static getDefaultConfig() {\n        return {\n            url: \"\",\n            waitUntil: \"networkidle0\",\n            delay: 2000,\n            colorScheme: \"dark\",\n            viewport: {\n                width: 1920,\n                height: 1080,\n                isMobile: false,\n                deviceScaleFactor: 1\n            }\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/microlink.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   backgroundStyleSchema: () => (/* binding */ backgroundStyleSchema),\n/* harmony export */   browserMockupSchema: () => (/* binding */ browserMockupSchema),\n/* harmony export */   colorSchemeSchema: () => (/* binding */ colorSchemeSchema),\n/* harmony export */   finalImageSizeSchema: () => (/* binding */ finalImageSizeSchema),\n/* harmony export */   gradientBackgroundSchema: () => (/* binding */ gradientBackgroundSchema),\n/* harmony export */   gradientColorSchema: () => (/* binding */ gradientColorSchema),\n/* harmony export */   gradientDirectionSchema: () => (/* binding */ gradientDirectionSchema),\n/* harmony export */   queryToRequest: () => (/* binding */ queryToRequest),\n/* harmony export */   screenshotConfigSchema: () => (/* binding */ screenshotConfigSchema),\n/* harmony export */   shadowConfigSchema: () => (/* binding */ shadowConfigSchema),\n/* harmony export */   snapQuerySchema: () => (/* binding */ snapQuerySchema),\n/* harmony export */   snapRequestSchema: () => (/* binding */ snapRequestSchema),\n/* harmony export */   solidBackgroundSchema: () => (/* binding */ solidBackgroundSchema),\n/* harmony export */   styleConfigSchema: () => (/* binding */ styleConfigSchema),\n/* harmony export */   validateSnapQuery: () => (/* binding */ validateSnapQuery),\n/* harmony export */   validateSnapRequest: () => (/* binding */ validateSnapRequest),\n/* harmony export */   viewportConfigSchema: () => (/* binding */ viewportConfigSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\nconst urlRegex = /^https?:\\/\\/(?:[-\\w.])+(?:\\:[0-9]+)?(?:\\/(?:[\\w\\/_.])*(?:\\?(?:[\\w&=%.])*)?(?:\\#(?:[\\w.])*)?)?$/;\nconst gradientDirectionSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"to-r\",\n    \"to-l\",\n    \"to-t\",\n    \"to-b\",\n    \"to-br\",\n    \"to-bl\",\n    \"to-tr\",\n    \"to-tl\"\n]);\nconst colorSchemeSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"light\",\n    \"dark\"\n]);\nconst browserMockupSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"safari\",\n    \"chrome\",\n    \"firefox\",\n    \"edge\",\n    \"none\"\n]);\nconst gradientColorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    color: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^#[0-9A-Fa-f]{6}$|^#[0-9A-Fa-f]{3}$|^rgb\\(|^rgba\\(|^hsl\\(|^hsla\\(/),\n    position: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(100).optional()\n});\nconst solidBackgroundSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"solid\"),\n    color: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^#[0-9A-Fa-f]{6}$|^#[0-9A-Fa-f]{3}$|^rgb\\(|^rgba\\(|^hsl\\(|^hsla\\(/)\n});\nconst gradientBackgroundSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"gradient\"),\n    direction: gradientDirectionSchema,\n    colors: zod__WEBPACK_IMPORTED_MODULE_0__.array(gradientColorSchema).min(2).max(5)\n});\nconst backgroundStyleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    solidBackgroundSchema,\n    gradientBackgroundSchema\n]);\nconst viewportConfigSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    width: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(320).max(4096).default(1920),\n    height: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(240).max(4096).default(1080),\n    isMobile: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    deviceScaleFactor: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0.5).max(3).default(1)\n});\nconst screenshotConfigSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(urlRegex, \"Invalid URL format\"),\n    waitUntil: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"load\",\n        \"domcontentloaded\",\n        \"networkidle0\",\n        \"networkidle2\"\n    ]).default(\"networkidle0\"),\n    delay: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(10000).default(2000),\n    colorScheme: colorSchemeSchema.default(\"dark\"),\n    viewport: viewportConfigSchema.default({})\n});\nconst shadowConfigSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    enabled: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(true),\n    blur: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(50).default(20),\n    offsetX: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(-50).max(50).default(0),\n    offsetY: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(-50).max(50).default(10),\n    color: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^#[0-9A-Fa-f]{6}$|^#[0-9A-Fa-f]{3}$|^rgb\\(|^rgba\\(|^hsl\\(|^hsla\\(/).default(\"#000000\"),\n    opacity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1).default(0.15)\n});\nconst finalImageSizeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    width: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(100).max(4096).optional(),\n    height: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(100).max(4096).optional(),\n    aspectRatio: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d+:\\d+$/).optional(),\n    maintainAspectRatio: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(true)\n});\nconst styleConfigSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    borderRadius: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(50).default(8),\n    margin: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(200).default(32),\n    background: backgroundStyleSchema.default({\n        type: \"gradient\",\n        direction: \"to-br\",\n        colors: [\n            {\n                color: \"#667eea\",\n                position: 0\n            },\n            {\n                color: \"#764ba2\",\n                position: 100\n            }\n        ]\n    }),\n    browserMockup: browserMockupSchema.default(\"none\"),\n    finalSize: finalImageSizeSchema.optional(),\n    shadow: shadowConfigSchema.default({})\n});\nconst snapRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(urlRegex, \"Invalid URL format\"),\n    screenshot: screenshotConfigSchema.partial().optional(),\n    style: styleConfigSchema.partial().optional()\n});\n// Custom number coercion that handles empty strings and invalid values\nconst safeNumberCoercion = (min, max)=>zod__WEBPACK_IMPORTED_MODULE_0__.preprocess((val)=>{\n        if (val === \"\" || val === undefined || val === null) return undefined;\n        const num = Number(val);\n        return isNaN(num) ? undefined : num;\n    }, zod__WEBPACK_IMPORTED_MODULE_0__.number().min(min ?? -Infinity).max(max ?? Infinity).optional());\nconst safeBooleanCoercion = ()=>zod__WEBPACK_IMPORTED_MODULE_0__.preprocess((val)=>{\n        if (val === \"\" || val === undefined || val === null) return undefined;\n        return val === \"true\" || val === true;\n    }, zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional());\nconst snapQuerySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(urlRegex, \"Invalid URL format\"),\n    waitUntil: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"load\",\n        \"domcontentloaded\",\n        \"networkidle0\",\n        \"networkidle2\"\n    ]).optional(),\n    delay: safeNumberCoercion(0, 10000),\n    colorScheme: colorSchemeSchema.optional(),\n    \"viewport.width\": safeNumberCoercion(320, 4096),\n    \"viewport.height\": safeNumberCoercion(240, 4096),\n    \"viewport.isMobile\": safeBooleanCoercion(),\n    \"viewport.deviceScaleFactor\": safeNumberCoercion(0.5, 3),\n    borderRadius: safeNumberCoercion(0, 50),\n    margin: safeNumberCoercion(0, 200),\n    \"background.type\": zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"solid\",\n        \"gradient\"\n    ]).optional(),\n    \"background.color\": zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^#[0-9A-Fa-f]{6}$|^#[0-9A-Fa-f]{3}$|^rgb\\(|^rgba\\(|^hsl\\(|^hsla\\(/).optional(),\n    \"background.direction\": gradientDirectionSchema.optional(),\n    \"background.colors\": zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    browserMockup: browserMockupSchema.optional(),\n    // Final image size parameters\n    \"finalSize.width\": safeNumberCoercion(100, 4096),\n    \"finalSize.height\": safeNumberCoercion(100, 4096),\n    \"finalSize.aspectRatio\": zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d+:\\d+$/).optional(),\n    \"finalSize.maintainAspectRatio\": safeBooleanCoercion(),\n    \"shadow.enabled\": safeBooleanCoercion(),\n    \"shadow.blur\": safeNumberCoercion(0, 50),\n    \"shadow.offsetX\": safeNumberCoercion(-50, 50),\n    \"shadow.offsetY\": safeNumberCoercion(-50, 50),\n    \"shadow.color\": zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^#[0-9A-Fa-f]{6}$|^#[0-9A-Fa-f]{3}$|^rgb\\(|^rgba\\(|^hsl\\(|^hsla\\(/).optional(),\n    \"shadow.opacity\": safeNumberCoercion(0, 1)\n});\nfunction validateSnapRequest(data) {\n    return snapRequestSchema.parse(data);\n}\nfunction validateSnapQuery(data) {\n    return snapQuerySchema.parse(data);\n}\nfunction queryToRequest(query) {\n    const request = {\n        url: query.url,\n        screenshot: {},\n        style: {}\n    };\n    if (query.waitUntil) request.screenshot.waitUntil = query.waitUntil;\n    if (query.delay) request.screenshot.delay = query.delay;\n    if (query.colorScheme) request.screenshot.colorScheme = query.colorScheme;\n    if (query[\"viewport.width\"] || query[\"viewport.height\"] || query[\"viewport.isMobile\"] !== undefined || query[\"viewport.deviceScaleFactor\"]) {\n        request.screenshot.viewport = {};\n        if (query[\"viewport.width\"]) request.screenshot.viewport.width = query[\"viewport.width\"];\n        if (query[\"viewport.height\"]) request.screenshot.viewport.height = query[\"viewport.height\"];\n        if (query[\"viewport.isMobile\"] !== undefined) request.screenshot.viewport.isMobile = query[\"viewport.isMobile\"];\n        if (query[\"viewport.deviceScaleFactor\"]) request.screenshot.viewport.deviceScaleFactor = query[\"viewport.deviceScaleFactor\"];\n    }\n    if (query.borderRadius) request.style.borderRadius = query.borderRadius;\n    if (query.margin) request.style.margin = query.margin;\n    if (query.browserMockup) request.style.browserMockup = query.browserMockup;\n    if (query[\"background.type\"] || query[\"background.color\"] || query[\"background.direction\"] || query[\"background.colors\"]) {\n        if (query[\"background.type\"] === \"solid\" && query[\"background.color\"]) {\n            request.style.background = {\n                type: \"solid\",\n                color: query[\"background.color\"]\n            };\n        } else if (query[\"background.type\"] === \"gradient\" && query[\"background.colors\"]) {\n            try {\n                const colors = JSON.parse(query[\"background.colors\"]);\n                request.style.background = {\n                    type: \"gradient\",\n                    direction: query[\"background.direction\"] || \"to-br\",\n                    colors: Array.isArray(colors) ? colors : []\n                };\n            } catch (e) {\n            // Invalid JSON, ignore\n            }\n        }\n    }\n    // Handle finalSize parameters\n    if (query[\"finalSize.width\"] || query[\"finalSize.height\"] || query[\"finalSize.aspectRatio\"] || query[\"finalSize.maintainAspectRatio\"] !== undefined) {\n        request.style.finalSize = {};\n        if (query[\"finalSize.width\"]) request.style.finalSize.width = query[\"finalSize.width\"];\n        if (query[\"finalSize.height\"]) request.style.finalSize.height = query[\"finalSize.height\"];\n        if (query[\"finalSize.aspectRatio\"]) request.style.finalSize.aspectRatio = query[\"finalSize.aspectRatio\"];\n        if (query[\"finalSize.maintainAspectRatio\"] !== undefined) request.style.finalSize.maintainAspectRatio = query[\"finalSize.maintainAspectRatio\"];\n    }\n    if (query[\"shadow.enabled\"] !== undefined || query[\"shadow.blur\"] || query[\"shadow.offsetX\"] || query[\"shadow.offsetY\"] || query[\"shadow.color\"] || query[\"shadow.opacity\"]) {\n        request.style.shadow = {};\n        if (query[\"shadow.enabled\"] !== undefined) request.style.shadow.enabled = query[\"shadow.enabled\"];\n        if (query[\"shadow.blur\"]) request.style.shadow.blur = query[\"shadow.blur\"];\n        if (query[\"shadow.offsetX\"]) request.style.shadow.offsetX = query[\"shadow.offsetX\"];\n        if (query[\"shadow.offsetY\"]) request.style.shadow.offsetY = query[\"shadow.offsetY\"];\n        if (query[\"shadow.color\"]) request.style.shadow.color = query[\"shadow.color\"];\n        if (query[\"shadow.opacity\"]) request.style.shadow.opacity = query[\"shadow.opacity\"];\n    }\n    return request;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validation.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsnap%2Froute&page=%2Fapi%2Fsnap%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsnap%2Froute.ts&appDir=%2FUsers%2Fmxrqz%2Fprojects%2Fmomentum%2Fsnap%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmxrqz%2Fprojects%2Fmomentum%2Fsnap&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();